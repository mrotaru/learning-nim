** Hello World
#+BEGIN_SRC nim
  proc my_proc(name: string): string =
    return "Hello " & name
  
  echo my_proc("World!")
#+END_SRC

#+RESULTS:
: Hello World!

- simple statements: cannot contain other statements: assignment, proc calls, return
- complex statements: can contain other statements: if, when, for, while, etc
- complex statements must always be indented - but not simple statements
- expression: statement that results in a value
- expressions can contain indentation after operators, open paren, and after commas

#+BEGIN_SRC nim
  let long_variable_name_1, long_variable_name_2 = 100
  if long_variable_name_1 + long_variable_name_1 > 100 and
    long_variable_name_1 * long_variable_name_1 < 1000:
    echo "true"
  else:
    echo "false"
#+END_SRC

#+RESULTS:
: false

- parens create an expression, which can also be used in conditionals:
#+BEGIN_SRC nim
      let long_variable_name_1, long_variable_name_2 = 100
      if (
        long_variable_name_1 + long_variable_name_1 > 100 and
        long_variable_name_1 * long_variable_name_1 < 1000
      ):
        echo "true"
      else:
        echo "false"
#+END_SRC
#+RESULTS:
: false

** const vs let
#+BEGIN_SRC nim
  let x = 42
  # x = 100 # cannot re-assign "let"
  const c = "i can't be changed and must be known at compile time"
  echo x, c
#+END_SRC

#+RESULTS:
: 42i can't be changed and must be known at compile time

** if/else and when
   - well, not much to say here:
   #+BEGIN_SRC nim
     let x = 50
     if x < 25:
       echo "small"
     elif x > 25 and x < 75:
       echo "medium"
     else:
       echo "large"
   #+END_SRC

   #+RESULTS:
   : medium

   - ~when~ is something else though; it's compile-time thing, equivalent to ~#ifdef~ statements in ~C/C++~:
   #+BEGIN_SRC nim
     when system.hostOS == "linux":
       echo "THIS WILL ONLY RUN ON LINUX"
     else:
       echo "YOU SHOULD BE ASHAMED"
   #+END_SRC

   #+RESULTS:
   : YOU SHOULD BE ASHAMED
   
** case
   #+BEGIN_SRC nim
     from strutils import parseInt
     let n = 1
     case n
     of 0..5, 9, 10: echo "A"
     of 6..8: echo "B"
     else: echo "nope"
   #+END_SRC

   #+RESULTS:
   : A

** loops
   #+BEGIN_SRC nim
     echo "count up"
     for i in countup(1, 5):
       echo i

     echo "count up .."
     for i in 1..5:
       echo i

     echo "count up with while"
     var i = 1
     while i <= 5:
       echo i
       inc(i)
   #+END_SRC

   #+RESULTS:
   #+begin_example
   count up
   1
   2
   3
   4
   5
   count up ..
   1
   2
   3
   4
   5
   count up with while
   1
   2
   3
   4
   5
   #+end_example

   #+BEGIN_SRC nim
     for i, x in ["a", "b", "c"].pairs:
       echo x, " at index ", i
   #+END_SRC

   #+RESULTS:
   : a at index 0
   : b at index 1
   : c at index 2

** scope and ~break~

   Scope is block-based; below will error, as ~x~ is accessed after the scope ends:
   #+BEGIN_SRC nim
     while false:
       var x = 42
       echo x
   #+END_SRC

   #+RESULTS:

   Named and anonymous block scopes:
   #+BEGIN_SRC nim
     block scope_1:
       var x = 1
       echo x
       block scope_2:
         var x = 2
         echo x
         block: # anonymous block
           var x = 3
           echo x
   #+END_SRC

   #+RESULTS:
   : 1
   : 2
   : 3

   ~break~ can exit loops - as one would expect:
   #+BEGIN_SRC nim 
     for i in 1..10:
       if i > 5: break
       echo i
   #+END_SRC

   #+RESULTS:
   : 1
   : 2
   : 3
   : 4
   : 5
   
   But ~break~ can also exit scope blocks:
   #+BEGIN_SRC nim
     block:
       echo "before"
       break
     echo "after"
   #+END_SRC

   #+RESULTS:
   : before

   When nested inside multiple "exitable" constructs (loops/blocks), the innermost one will be exited:
   #+BEGIN_SRC nim
     block:
       echo "foo"
       for i in 1..10:
         if i > 3: break
         echo i
         echo "bar"
   #+END_SRC

   #+RESULTS:
   : foo
   : 1
   : 2
   : 3
   : bar
   
   When ~break~ gets a block name, the block will be exited regardless of nesting:
   #+BEGIN_SRC nim
     block scope_1:
       echo "foo"
       for i in 1..10:
         if i > 3: break scope_1
         echo i
         echo "bar"
   #+END_SRC

   #+RESULTS:
   : foo
   : 1
   : 2
   : 3
   
   #+BEGIN_SRC nim
   #+END_SRC
   
** result, varargs
   - functions have an implicit ~result~ variable declared, which is used as return value:
   #+BEGIN_SRC nim
     proc sum(args: varargs[int]): int =
       for arg in args:
         result+=arg
    
     echo sum(0)
     echo sum(1,2,3)
   #+END_SRC

   #+RESULTS:
   : 0
   : 6
   
** parameters, defaults, overloading
   - params immutable by default
   #+BEGIN_SRC nim
     proc foo(x: int): void =
       x = 42 # Error: 'x' cannot be assigned to

     foo(0) 
   #+END_SRC

   #+RESULTS:
   
   - must declare param use ~var~ to mutate:
   #+BEGIN_SRC nim
     proc foo(x: var int): void =
       x = 42

     var x = 0
     foo(x)
     echo x
   #+END_SRC

   #+RESULTS:
   : 42

   - can also shadow params, by declaring same name as ~var~ inside the fn body:
   #+BEGIN_SRC nim
     proc foo(x: var int): void =
       var x = 42

     var x = 0
     foo(x)
     echo x
   #+END_SRC

   #+RESULTS:
   : 0
   
   - if a fn returns a value, normally it cannot be invoked without using the returned value:
   #+BEGIN_SRC nim
     proc foo(): int =
       return 42

     #foo() # Error: expression 'foo()' is of type 'int' and has to be used (or discarded)
     let x = foo() # fine - we're using the returned value, it's not "wasted"
     discard foo() # fine - we're explicitly discarding the returned value
   #+END_SRC

   - to allow a function's return value to be ignored implicitly, must use ~{.discardable}~ pragma:
   #+BEGIN_SRC nim
     proc foo(): int {.discardable.} =
       return 42

     foo() # fine
   #+END_SRC

   #+RESULTS:
   
   - params can be specified by name; helpful when fn has many params
   - params can also have default values
   #+BEGIN_SRC nim
     proc foo(a: int; b, c: string, d = "bar"): void =
       echo a,b,c,d

    foo(b="bbb", c="ccc", a=42)
   #+END_SRC

   #+RESULTS:
   : 42bbbcccbar
   
   - overloading - two procs can have same name, but params must differ in types
   #+BEGIN_SRC nim
     proc foo(a: int): void =
       echo "foo for int ", a
     proc foo(a: string): void =
       echo "foo for string ", a
     foo(100)
     foo("str")
   #+END_SRC

   #+RESULTS:
   : foo for int 100
   : foo for string str

** forward declarations
   - stuff needs to be declared before use
   - to work around this in mutually recursive procs, use forward declarations:
   #+BEGIN_SRC nim
     proc f2(): void # forward declaration - no body '='

     proc f1(): void =
       f2()
     proc f2(): void =
       f1()
   #+END_SRC

   #+RESULTS:

** iterator, generator, yield
   - use ~iterator~ keyword instead of ~proc~,  and use ~yield~ to reutrn and continue
   - (unlike js generators, there doesn't seem to be pass values back when resumes)
   - can't recurse
   - can only be invoked from loops
   - can't ~return~ - only ~yield~
   - cannot be forward declared (yet)
   #+BEGIN_SRC nim
      iterator my_iter(start, finish: int): int =
        var i = start
        while i <= finish:
          yield i
          inc(i)

     for i in my_iter(1,5):
       echo i
   #+END_SRC

   #+RESULTS:
   : 1
   : 2
   : 3
   : 4
   : 5
   
** bools, coercion
   - there is no coercion; code below does not compile:
   #+BEGIN_SRC nim
     let n = 0
     if not n:
       echo "false"
   #+END_SRC

   #+RESULTS:

** chars, strings
   - a ~char~ is always 1 byte; can be compared amongst themselves
   - trying to store multi-byte Unicode in a ~char~ ⇒ compilation error
   - the ~$~ operator (similar to ~toString()~ in js) converts a ~char~ to ~string~
   - cannot be mixed with integers
   - single quotes for chars, double for strings
   #+BEGIN_SRC nim
     let a = 'x' # char
     let b = "x" # string
     let c = "Ⅶ" # string
     # let d = 'Ⅶ' # Error: missing closing ' for character literal
     echo repr(a)
     echo repr(b)
     echo c
   #+END_SRC

   #+RESULTS:
   : 'x'
   : 000000000068F060"x"
   : Ⅶ

   - format a string ? got "Error: undeclared identifier: '%'"
   - ~%~ is defined in ~strutils~
   - with ~strutils~ imported, got "Error: type mismatch: got <string, array[0..0, int]>"
     - ~strformat~ makes no difference
   - ~array~ vs ~openArray~ ? not the issue; it's that ~foo~ is ~int~ - and array needs to contain strings
   #+BEGIN_SRC nim
     import strutils
     let foo = 42

     #proc `%`(formatstr: string; a: openArray[string]): string
     #  first type mismatch at position: 2
     #  required type for a: openArray[string]
     #  but expression '[foo]' is of type: array[0..0, int]
     #echo "foo is $1" % [foo]

     echo "foo is $1" % [$foo] # use toString operator ($)
   #+END_SRC

   #+RESULTS:
   : foo is 42
   
   - also, very useful:
   #+BEGIN_SRC nim
     import strformat
     let foo = 42
     let bar = "100"
     echo fmt"{foo = } and {bar=}"
   #+END_SRC

   #+RESULTS:
   : foo = 42 and bar=100

** numbers - ints, floats
   - multiple types of integers built-in
   - ~int~ has same size as pointer - so 64 bits on 64-bit systems (?:)
   - signed integers are used when "signedness" is not specified (e.g., for ~int~, ~int32~, etc)
   - lossy conversions result in exception (~EOutOfRange~)
   #+BEGIN_SRC nim
     let
        x = 0
        y = 0'i8 # eight-bit int
        z = 0'i16 # 16-bit int
     var a = 0'i8
     var b = 0'ui8
     a = 127 # ok
     # a = 128 # Error: type mismatch: got <int literal(128)> but expected 'int8'
     b = 128 # ok
     echo a, ' ', b
   #+END_SRC

   #+RESULTS:

   - floats:
   #+BEGIN_SRC nim
     var
       x = 0.0
       y = 0.0'f32
       z = 0.0'f64
   #+END_SRC
   
   - conversions:
   #+BEGIN_SRC nim
     x = y
     echo x, ' ',  y
     let a = 1
     # let b = x + a # Error: type mismatch: got <float64, int>
     let c = x + 1 # fine - types are different (float and int) - result will be float
     echo b
   #+END_SRC

   #+RESULTS:
   : 0.0 0.0
   : 1.0

** enums
   #+BEGIN_SRC nim
      type
        Direction = enum
          north, east, south, west
     var dir = south
     echo dir
     dir = west
     echo dir
   #+END_SRC

   #+RESULTS:
   : south
   : west
   
** ordinals
   - many types in nim are "ordinal" - they support ordering, and associated operations
   - enums, ints, char, bool - ordinals
   #+BEGIN_SRC nim
      type
        Direction = enum
          north, east, south, west
     var x = east
     echo ord(x)
     # echo inc(x) # does not compile  - type mismatch
     echo succ(x)
     echo pred(x)
   #+END_SRC

   #+RESULTS:
   : 1
   : south
   : north

** subranges
   #+BEGIN_SRC nim
     type sr1 = range[0..5]
     # type sr2 = range[0..5, 10-12, 20] # does not compile, which kinda makes sense - a range has start and finish, is not a set
     echo sr1 # prints "sr1", not the actual range
     # echo repr(sr1) # fails - such ranges are not representable by default
     # - such ranges are not representable by default+END_SRC

     # the built-in Natural is defined as such:
     type MyNatural = range[0..high(int)]
     var x, y: MyNatural
     x = 1
     # y = -1 # does not compile - Error: conversion from int literal(-1) to MyNatural is invalid
     echo x, ' ',  y
   #+END_SRC

   #+RESULTS:
   
** sets
   - implemented as bit vectors; max nr of elements - 2^16
   - base type must be one of int8, int16, uint8/byte - uint16, char, enum
   - constructed with ~{}~
   - operators are overloaded to support union, intersection, difference, equality, subset, strict subset
   - keywords provide additional functionality: membership (~in~, ~notin~)
   - functions: ~contains()~, ~card(A)~ (cardinality), ~incl(A, e)~, ~excl(A, e)~
   #+BEGIN_SRC nim
     var x = {'a'..'z'} # implicitly a set of chars
     # type CharSet = set[char] # not needed
     echo x

     type Direction = enum north, east, south, west
     var A: set[Direction]
     var s = south
     A = {north, south}
     echo "A ", A

     var B = {north, east, west} # no need for explicit declaration of set type
     echo "B ", B

     echo "union ", A + B
     echo "difference ", A - B
     echo "intersection ", A * B
     echo s in A, ' ', s in B
     incl(A, east) # add east to A
     echo "A ", A
     excl(A, north) # remove north from A
     echo "A ", A
   #+END_SRC

   #+RESULTS:
   : {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}
   : A {north, south}
   : B {north, east, west}
   : union {north, east, south, west}
   : difference {south}
   : intersection {north}
   : true false
   : A {north, east, south}
   : A {east, south}
   
** bit fields - aka flags
   #+BEGIN_SRC nim
     type Permission* {.size: sizeof(cint).} = enum
       Read
       Write
       Execute
     type Permissions = set[Permission]
     proc to_int(perm: Permissions): int = cast[cint](perm)
     proc to_permissions(number: int): Permissions = cast[Permissions](number)

     echo to_int({}) # empty set
     echo to_int({Read})
     echo to_int({Write})
     echo to_int({Read,Write})
     echo to_int({Read,Write,Execute})
     echo to_permissions(0)
     echo to_permissions(3)
     echo to_permissions(5)
     echo to_permissions(9) # this also "works"
   #+END_SRC

   #+RESULTS:
   : 0
   : 1
   : 2
   : 3
   : 7
   : {}
   : {Read, Write}
   : {Read, Execute}
   : {Read}

   #+BEGIN_SRC nim
   #+END_SRC

** arrays
   - must have same type
   - bound-checked at compile time (can be disabled w pragma)
   - assignments copy arrays
   #+BEGIN_SRC nim
     type IntArray = array[0..5, int] # array with 6 int elements
     var arr: IntArray
     arr = [1, 2, 3, 4, 5, 6]
     # arr = [1, 2, 3, 4, 5, 6, 7] # Error: type mismatch: got <array[0..6, int]> but expected 'IntArray = array[0..5, int]'
     for i in low(arr) .. high(arr):
       echo arr[i]
   #+END_SRC

   #+RESULTS:
   : 1
   : 2
   : 3
   : 4
   : 5
   : 6

   #+BEGIN_SRC nim
     type Direction = enum north, east, south, west
     type Wind = enum none, light, strong
     type DirectionWind = array[north..west, Wind]
     var todays_winds: DirectionWind
     todays_winds[north] = strong
     todays_winds[east] = none
     todays_winds[south] = light
     echo todays_winds, repr(todays_winds)
     echo low(todays_winds) # "smallest" index - whichever comes first in order of Direction enum - north
     echo len(todays_winds) # 4 (not 3!)
     echo high(todays_winds) # "largest" possible index - west (not "actual" largest index - south)
   #+END_SRC

   #+RESULTS:
   : [strong, none, light, none][strong, none, light, none]
   : 
   : north
   : 4
   : west
   
   #+BEGIN_SRC nim
     # bad example...
     type Soldier = enum alive, wounded, dead
     type Line = array[1..5, Soldier]             
     type Regiment = array[1..3, Line]
     var regiment: Regiment
     regiment = [
         [alive, alive, alive, wounded, dead],
         [alive, wounded, alive, wounded, dead],
         [alive, wounded, alive, wounded, dead]]
     echo regiment
     # echo regiment[0] # Error: index 0 not in 1 .. 3
     echo regiment[1] # first line
     echo regiment[1][1] # first soldier in first line
     regiment[1][1] = wounded
     echo regiment[1][1]
   #+END_SRC
   
   #+RESULTS:
   : [[alive, alive, alive, wounded, dead], [alive, wounded, alive, wounded, dead], [alive, wounded, alive, wounded, dead]]
   : [alive, alive, alive, wounded, dead]
   : alive
   : wounded

   #+BEGIN_SRC nim
     type Matrix3 = array[0..2, array[0..2, int]] # 3x3 matrix of integers
     type Matrix4 = array[3, array[3, int]] # 4x4 matrix of integers, with index starting at 0
     var matrix: Matrix3
     matrix = [[0,1,2],[3,4,5],[6,7,8]]
     echo matrix
     echo matrix[1]
     echo matrix[1][2]
   #+END_SRC

   #+RESULTS:
   : [[0, 1, 2], [3, 4, 5], [6, 7, 8]]
   : [3, 4, 5]
   : 5

** sequences
   - resizable, so always allocated on the heap & garbage collected
   - indexed similar arrays, from 0; have low, len, high
   #+BEGIN_SRC nim
      var x: seq[int]
      var y = @[1, 2, 3]
      echo x
      echo y
      for val in y: # iterate over values
        echo val
      for i,val in y: # iterate over indices and values
        echo i, '=', val
   #+END_SRC

   #+RESULTS:
   : @[]
   : @[1, 2, 3]
   : 1
   : 2
   : 3
   : 0=1
   : 1=2
   : 2=3
   
   - adding items; below fails with *Error: unhandled exception: index out of bounds, the container is empty [IndexDefect]*
   #+BEGIN_SRC nim
     var x: seq[int] = @[]
     x[0] = 42
   #+END_SRC
   
   - to resolve, use ~insert~; more: https://nim-lang.org/docs/sequtils.html
   - note that items are inserted at the head of the sequence; ~100~ will be the first item
   #+BEGIN_SRC nim
     var x: seq[int] = @[]
     x.insert(42)
     x.insert(100)
     echo x
   #+END_SRC

   #+RESULTS:
   : @[100, 42]
   
** open arrays
   - only for params; cannot be nested
   - number of items can vary
   - compatible sequences and arrays can be passed; index type does not matter - only the underlying values need to be compatible
   #+BEGIN_SRC nim
     var a = [1, 2, 3] # array of ints
     var b = ["foo", "bar"] # array of strings
     var c = @["boz"] # sequence of strings
     proc f(oa: openArray[string]): int =
       oa.len
     # echo f(a) # Error: type mismatch: got <array[0..2, int]>
     echo f(b)
     echo f(c)
   #+END_SRC

   #+RESULTS:
   : 2
   : 1

   - open array can't be member ?
   - *Error: invalid type: 'openArray[int]' in this context: 'Foo' for var*
   #+BEGIN_SRC nim
     type Foo = ref object
       bar: openArray[int]
     var foo = Foo(bar: [1, 2, 3]) 
   #+END_SRC

   #+RESULTS:

** varargs
   - similar to an open array, but also similar to js "rest" param (...)
   #+BEGIN_SRC nim
     proc f(first: string, rest: varargs[int]) =
       for arg in rest:
         echo first, " ", arg

    f("foo", 1, 2, 3)
   #+END_SRC

   #+RESULTS:
   : foo 1
   : foo 2
   : foo 3

   - can apply conversions:
   #+BEGIN_SRC nim
     # proc f(first: string, rest: varargs[int, `$`]) = # does not compile - prob bc `$` does not result in an int
     proc f(first: string, rest: varargs[string, `$`]) =
       for arg in rest:
         echo first, " ", arg

    f("foo", 1, "two", [3])
   #+END_SRC

   #+RESULTS:
   : foo 1
   : foo two
   : foo [3]
   
** slices
   - some collection types have operators which take ranges
   - can be used both to read, and write
   #+BEGIN_SRC nim
     var a = "1234567890"
     # echo a[0..]
     echo a[0..1] # 12
     echo a[0..^1] # 1234567890
     echo a[0..^2] # 123456789
     echo a[0..^3] # 12345678
     a[5..9] = "abcde" # change the last 5 items
     a[5..9] = "abcdefgh" # also works - can insert more than slice len
     echo a
   #+END_SRC

   #+RESULTS:
   : 12
   : 1234567890
   : 123456789
   : 12345678
   : 12345abcdefgh

** objects
   - also value types - copied on assignment
   #+BEGIN_SRC nim
     type Point = object
       x: int
       y: int
     var p1 = Point(x: 100, y: 200)
     echo p1
     echo p1.x 
     var p2 = p1 # copy
     p2.x = 1000
     echo p1, p2
     var p3 = Point(y: 100, x: 200) # order can vary
     var p4 = Point(y: 100) # unspecified members get default value for their respective type - 0 for numeric, "" for strings, etc
     echo p3, p4
   #+END_SRC

   #+RESULTS:
   : (x: 100, y: 200)
   : 100
   : (x: 100, y: 200)(x: 1000, y: 200)
   : (x: 200, y: 100)(x: 0, y: 100)
   
   - with ~ref~, objects go on heap
   - the ~[]~ operator can be used to dereference, but it is optional and actually discouraged
   - https://stackoverflow.com/questions/22096880/what-is-the-model-of-value-vs-reference-in-nim

** tuples
   - similar to objects, but indexed
   - fields always public
   - tuples are structurally typed - fields of same type and same order ⇒ types are equivalent
   - order in constructor must match order of declaration
   - like objects, can use dot notation to access properties - but can also access props by index
   - below won't compile, bc types can't be re-declared - but all three tuple types are equivalent
   #+BEGIN_SRC nim
     type Point = tuple
       x: int
       y: int
     type Point = tuple[x: int, y: int]
     type Point = (int, int)
   #+END_SRC

   #+RESULTS:
   
   - can be anon
   #+BEGIN_SRC nim
     var x: tuple[name: string, age: int] 
     var y: tuple[id: string, distance: int]
     x = ("Joe", 10)
     y = ("jim", 20)
     echo x, y
     # y = x # Error
     var z = ("foo", 42)
     x = z
     echo x
   #+END_SRC
     
   #+RESULTS:
   : (name: "Joe", age: 10)(id: "jim", distance: 20)
   : (name: "foo", age: 42)

   - can be unpacked (similar to js destructuring) during assignment
   #+BEGIN_SRC nim
     type Point = tuple[x: int, y: int]
     proc get_origin(): Point =
       result = (x: 0, y: 0)
     let (ox, oy) = get_origin()
     echo "x: ", ox, " y: ", oy
   #+END_SRC

   #+RESULTS:
   : x: 0 y: 0

** references and pointers
   - traced vs untraced (pointers)
   - traced: point to objects in garbage-collected heap; decl wtih ~ref~
   - untraced: manually allocated (unsafe); decl with ~ptr~
   - can be ~nil~
   #+BEGIN_SRC nim
     type Node = ref object
       left, right: Node
       payload: int
     var a = new(Node)
     echo n.payload
   #+END_SRC

   #+RESULTS:
   : 0

** procedural type - function pointers, functional programming
   #+BEGIN_SRC nim
     import sequtils

     proc double(x: int): int =
       return x * 2

     proc triple(x: int): int =
       return x * 3

     proc do_something(what: proc (x: int): int, x: int): int =
       return what(x)

     var res1 = do_something(double, 5)
     var res2 = do_something(triple, 5)
     echo res1, ' ', res2
     echo @[1, 2, 3].map(double)
   #+END_SRC

   #+RESULTS:
   : 10 15
   : @[2, 4, 6]
   
** modules
   - each module is in its own file (no folders?)
   - top-leve symbols marked with ~*~ are exported
   - top-level statements executed at the start (also when imported ?)
   - ~isMainModule~ can be used with ~when~ to run smth when file is executed
   - ~import~, ~from x import y~, ~import x except y~, ~from x as y import z~
   #+BEGIN_SRC nim
   #+END_SRC

** oop
   #+BEGIN_SRC nim
     type Foo = object
       x: int
       y: string

     # getters not needed for plain properties, but can have setters
     proc `x=`(self: var Foo, value: int) {.inline.} =
       self.x = value

     # "self" is not a magic keyword and can be changed
     proc `y=`(this: var Foo, value: string) {.inline.} =
       this.y = value

     # methods do not have a "hardcoded" connection to the objects
     # and new methods can be added to an object dynamically, even
     # in different modules
     proc get_my_doubled_x(self: Foo): int =
       self.x * 2

     # self.x cannot be assigned to ?!
     proc double_my_x(self: Foo): void =
       self.x = self.x * 2
  
     # constructor call
     var foo1 = Foo(x: 42)

     # if not specified in constructor call, fields will be initialized with
     # default values
     var foo2 = Foo()

     # invoking method
     echo foo1.get_my_doubled_x()

     # invoking method, using UFCS
     # https://en.wikipedia.org/wiki/Uniform_Function_Call_Syntax
     echo get_my_doubled_x(foo2)

     foo1.x = 100
   #+END_SRC

   #+RESULTS:

   #+BEGIN_SRC nim
   #+END_SRC

** exceptions
   #+BEGIN_SRC nim
     type MyException = object
       msg: string

     #raise Exception("foo") # Error: type mismatch: got <string> but expected 'Exception = object'
     #raise Exception(MyException(msg: "foo")) # Error: type mismatch: got <MyException> but expected 'Exception = object'
     #raise newException(MyException(msg: "foo")) # Error: type mismatch

     #Warning: inherit from a more precise exception type like ValueError, IOError or OSError.
     #  If these don't suit, inherit from CatchableError or Defect. [InheritFromException]
     #type MyException2 = object of Exception
     #raise newException(MyException2, "foo")

     # no warnings; Defect represents a programming error
     type MyException3 = object of Defect
     raise newException(MyException3, "foo")
   #+END_SRC

   #+RESULTS:
   
** a seq nested in a type
   - wouldn't work (https://play.nim-lang.org/#ix=2Gsc); asked on Nim discord, friendly people, got reply (https://play.nim-lang.org/#ix=2Gsk)
   - fixed:
   #+BEGIN_SRC nim -n
    type Foo[T] = ref object
      items: seq[T]

    proc newFoo[T]: Foo[T] =
      new result

    proc add[T](this: var Foo[T], item: T): void =
      this.items.insert(item, 0)

    var b1 = newFoo[int]()

    b1.add(42)
    echo b1.items
   #+END_SRC

   #+RESULTS:
   : @[42]

** generics, data structures: stack (w. seq)
   - if ~items~ is an ~openArray~, below fails: *Error: invalid type: 'openArray[int]' in this context: 'Stack[system.int]' for var*
     - because size is unknown, i guess ?
   #+BEGIN_SRC nim
     type Stack[T] = ref object
       items: seq[T]

     proc push[T](this: Stack, el: T): void =
       this.items.insert(el)

     # weird: if ~T~ is not specified for ~Stack~, it fails with:
     # file.nim (l, c) template/generic instantiation of `pop` from here
     # file.nim (l, c) Error: cannot instantiate: 'T'
     proc pop[T](this: Stack[T]): T =
       var el = this.items[this.items.len() - 1]
       this.items.delete(this.items.len() - 1)
       result = el

     var stack = Stack[int](items: @[])
     stack.push(1)
     stack.push(2)
     stack.push(3)
     echo $stack.items
     var popped = stack.pop()
     echo $popped, $stack.items
     popped = stack.pop()
     echo $popped, $stack.items
   #+END_SRC

   #+RESULTS:
   : @[3, 2, 1]
   : 1@[3, 2]
   : 2@[3]

   - list data structures: https://nim-lang.org/docs/lists.html
** generics, data structures: double-ended queue (WIP)
   #+BEGIN_SRC nim
     type Deque[T] = ref object
       items: array[T]

     proc push[T](this: Stack, el: T): void =
       this.items.insert(el)

     # weird: if ~T~ is not specified for ~Stack~, it fails with:
     # file.nim (l, c) template/generic instantiation of `pop` from here
     # file.nim (l, c) Error: cannot instantiate: 'T'
     proc pop[T](this: Stack[T]): T =
       var el = this.items[this.items.len() - 1]
       this.items.delete(this.items.len() - 1)
       result = el

     var stack = Stack[int](items: @[])
     stack.push(1)
     stack.push(2)
     stack.push(3)
     echo $stack.items
     var popped = stack.pop()
     echo $popped, $stack.items
     popped = stack.pop()
     echo $popped, $stack.items
   #+END_SRC

   #+RESULTS:

** generics, data structures: circular buffer
   - store count/total nr of items inserted so far
   - provide an index operator:
     - buff[0] ⇒ most recent ("hottest") item
     - buff[1] ⇒ the next hottest
     - buff[n - 1] (last item) ⇒ last introduced ("coldest") item (n = buffer capacity)
   - https://en.wikipedia.org/wiki/Circular_buffer
   #+NAME: circular_buffer
   #+BEGIN_SRC nim :tangle circular_buffer.nim
     import strutils

     type CircularBuffer[T] = ref object
       items: seq[T]
       capacity: int
       count: int

     proc newCircularBuffer[T](capacity: int): CircularBuffer[T] =
       new result
       result.capacity = capacity
       result.items = newSeq[T](result.capacity)

     proc insert[T](this: var CircularBuffer[T], item: T): void =
       this.items[this.count mod this.capacity] = item
       echo "inserted $# at $#; items: $#" % [$item, $(this.count mod this.capacity), $this.items]
       this.count += 1

     proc `[]`[T](this: var CircularBuffer[T], index: int): T =
       let latest_real_index = (this.count - 1) mod this.capacity
       let real_index = latest_real_index - index
       if real_index < 0:
         return this.items[this.capacity + real_index]
       else:
         return this.items[real_index]
   #+END_SRC

   #+NAME: circular_buffer_tests
   #+BEGIN_SRC nim :noweb yes :tangle circular_buffer.nim
     <<circular_buffer>>

     var buff = newCircularBuffer[char](3)
     echo buff.items
     buff.insert('a')
     assert(buff[0] == 'a')
     #assert(buff[1]) # throws
     #assert(buff[2]) # throws
     buff.insert('b')
     assert(buff[0] == 'b')
     assert(buff[1] == 'a')
     #assert(buff[2] == 'a') # throws
     buff.insert('c')
     assert(buff[0] == 'c')
     assert(buff[1] == 'b')
     assert(buff[2] == 'a')
     buff.insert('d')
     assert(buff[0] == 'd')
     assert(buff[1] == 'c')
     assert(buff[2] == 'b')
     buff.insert('e')
     assert(buff[0] == 'e')
     assert(buff[1] == 'd')
     assert(buff[2] == 'c')
     echo buff.items
   #+END_SRC

   #+RESULTS: circular_buffer_tests
   : @['\x00', '\x00', '\x00']
   : inserted a at 0; items: @['a', '\x00', '\x00']
   : inserted b at 1; items: @['a', 'b', '\x00']
   : inserted c at 2; items: @['a', 'b', 'c']
   : inserted d at 0; items: @['d', 'b', 'c']
   : inserted e at 1; items: @['d', 'e', 'c']
   : @['d', 'e', 'c']

   #+RESULTS:

   #+RESULTS: circular-buffer
   : @['\x00', '\x00', '\x00']
   : inserted a at 0; items: @['a', '\x00', '\x00']
   : inserted b at 1; items: @['a', 'b', '\x00']
   : inserted c at 2; items: @['a', 'b', 'c']
   : inserted d at 0; items: @['d', 'b', 'c']
   : inserted e at 1; items: @['d', 'e', 'c']
   : @['d', 'e', 'c']

   #+RESULTS: circular-buffer-1

** ...
   #+BEGIN_SRC nim
   #+END_SRC
   
